*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    height: 100vh;
    width: 100%;
    border: 3px ridge gold;
    display: flex;
    justify-content: center;
    align-items: center;
    
}

.item1, .item2, .item3, .item4, .item5, .item6{
    border: 2px solid purple;
    text-align: center;
}

.container{
    width: 80%;
    border: 2px solid red;
    

    /* Grid properties starts here */

    display: grid;
    grid-template-rows: 250px 250px;

    /* defining rows of height 250px ( Here we have write 250px 2 times for defining 2 rows ) */

    /* grid-template-columns: 250px 250px 250px; */
    /* grid-template-columns: 250px 250px 1fr; */
    /* grid-template-columns: 1fr 1fr 1fr; */
    
    /* defining columns of height 250px ( Here we have write 250px 2 times for defining 2 columns ) */
    /* The meaning of 1 fractional unit is that all the items will get equal space and there is no spaces left */
    
    /* Suppose we have to define 20 columns then we can't write 1 fr 20 times therefore we have a function repeat(how_Many_Columns,how_Much_Space_Will_Aquire) */
    /* Same goes to row also */

    /* grid-template-columns: repeat(3,1fr); */
    
    /* Text positions in grid */

    /* grid-template-columns: 1fr min-content 1fr; */
    /* Basically by applying min-content property the text with the longest width will take the width of the box*/

    /* grid-template-columns: 1fr max-content 1fr; */
    /* Basically by applying max-content property it will take the width by using the entire sentence*/

    /* grid-template-columns: 1fr minmax(250px,1fr) 1fr; */

    /* basically here with minmax(minimumValue,maximumValue) property we are saying that if we shrink our container then the 2nd item should minimum acquire 250px and maximum as equal space */
    
    grid-template-columns: repeat(3,minmax(250px,1fr));
    
    /* grid-template-columns: repeat(auto-fill,minmax(250px,1fr)); */
    /* This is mainly used for responsive design  */
    

    /* If we want gap b/w the items */

    /* row-gap: 20px; */
    /* It will give gap on the rows b/w the items */

    /* column-gap: 20px; */
    /* It will give gaps on the columns b/w the items */

    /* or short hand is only gap and this will provide gap b/w both the rows and columns */
    gap: 20px;

    padding: 6px;

    /* This property is used to handle implicit grid */
    grid-auto-rows: 250px;
    grid-auto-columns: 250px;


    /* Alignments in grid */

    /* align-items: self-start; */
    /* align-items: self-end; */
    /* align-items: center; */
    /* align-items: stretch; */

    /* Justify Horizontal*/
    /* justify-items: self-start; */
    /* justify-items: self-end; */
    /* justify-items: center; */
    /* justify-items: stretch; */

}

/* Responsive of grid layout */

@media (width < 1200px) {
    .container{
        grid-template-columns: repeat(auto-fill,minmax(250px,1fr));
    }
}

.item1{
    /* Now lets say we need to change the position of item1 with item5 therefore we need to write the item5 column starting and ending point */

    /* grid-column-start: 2;
    grid-column-end: 3;
    grid-row-start: 2;
    grid-row-end: 3; */

    /* This number is starting from 1 onwards. we can check the numbering when we go to the inspect and click on the grid option then the row's starting point and column's ending point will appear. */

    /* We have a short hand also (i.e grid-row and grid-column ) */

    /* grid-row: 2 / 3;
    grid-column: 2 / 3; */

    /* Syntax--> grid-row: starting row / ending row */
    /* Syntax--> grid-column: starting row / ending row */
}


/* We have an Explicit grid and Implicit grid --> means what ever the rows and columns we have defined is known as Explicit grid but if any extra row or column is automatically made then it is known as implicit grid. But the problem is that for the implicit frid there is no height defined for it, such that we use grid-auto-row: 250px and grid-auto-column: 250px this means that if any row and column is created automatically it will have 250px row height and column hight*/

.item2{
    /* grid-row: 1 / 2;
    grid-column: 2 / 4; */
}

/* .item3{

}

.item4{

}

.item5{

}

.item6{

} */